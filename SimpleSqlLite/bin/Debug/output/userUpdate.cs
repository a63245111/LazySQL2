//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Autogeneration.Dao.SQL
{
    
    
    public class userUpdateClass
    {
        
        public static ExecuteNonModel userUpdate(string user, string pwd, string power, string id)
        {
            System.Text.StringBuilder StrbSQL = new System.Text.StringBuilder();
            LazySQL.Infrastructure.SQLiteTemplate sqlLiteT = new LazySQL.Infrastructure.SQLiteTemplate();
            try
            {
                System.Collections.Generic.List<System.Data.SQLite.SQLiteParameter> aList = new System.Collections.Generic.List<System.Data.SQLite.SQLiteParameter>();
                StrbSQL.Append("UPDATE user SET ");
                System.Text.StringBuilder par0 = new System.Text.StringBuilder();
                if (!string.IsNullOrWhiteSpace(user))
                {
                    par0.Append("user = @userParSET");
                    System.Data.SQLite.SQLiteParameter userParSET = new System.Data.SQLite.SQLiteParameter("@userParSET",userParSET);
                    aList.Add(userParSET);
                }
                if (!string.IsNullOrWhiteSpace(pwd))
                {
                    par0.Append(" , ");
                    par0.Append("pwd = @pwdParSET");
                    System.Data.SQLite.SQLiteParameter pwdParSET = new System.Data.SQLite.SQLiteParameter("@pwdParSET",pwdParSET);
                    aList.Add(pwdParSET);
                }
                if (!string.IsNullOrWhiteSpace(power))
                {
                    par0.Append(" , ");
                    par0.Append("power = @powerParSET");
                    System.Data.SQLite.SQLiteParameter powerParSET = new System.Data.SQLite.SQLiteParameter("@powerParSET",powerParSET);
                    aList.Add(powerParSET);
                }
                StrbSQL.Append(par0);
                StrbSQL.Append(" where ");
                System.Text.StringBuilder par1 = new System.Text.StringBuilder();
                if (!string.IsNullOrWhiteSpace(id))
                {
                    par1.Append("id = @id");
                    System.Data.SQLite.SQLiteParameter idPar = new System.Data.SQLite.SQLiteParameter("@id",id);
                    aList.Add(idPar);
                }
                StrbSQL.Append(par1);
                return sqlLiteT.ExecuteNonQuery("Data Source=db\\sqlliteTest.db;Initial Catalog=sqlliteTest;Integrated Security=Tru" +
                        "e;Max Pool Size=10", StrbSQL, aList);
            }
            catch (System.Exception ex)
            {
                throw ex;;
            }
        }
    }
}
